from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler, CommandHandler, ContextTypes
from database import create_connection
import logging

logger = logging.getLogger(__name__)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–ª—è –∫–æ–º–∞–Ω–¥, –∏ –¥–ª—è callback)
        effective_message = update.message or update.callback_query.message
        
        conn = create_connection()
        cursor = conn.cursor()
        
        cursor.execute("SELECT category_id, name FROM categories ORDER BY category_id")
        categories = cursor.fetchall()
        
        keyboard = [
            [InlineKeyboardButton(name, callback_data=f"cat_{category_id}")]
            for category_id, name in categories
        ]
        
        await effective_message.reply_text(
            "üè™ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_main_menu: {e}")
        if update.callback_query:
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")
    finally:
        if conn:
            conn.close()

async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        category_id = int(query.data.split('_')[1])
        conn = create_connection()
        cursor = conn.cursor()
        
        cursor.execute(
            "SELECT product_id, name, price FROM products WHERE category_id = ?",
            (category_id,)
        )
        products = cursor.fetchall()
        
        keyboard = [
            [InlineKeyboardButton(
                f"{name} - {price:.2f} —Ä—É–±.", 
                callback_data=f"prod_{product_id}_{price}"
            )]
            for product_id, name, price in products
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        
        await query.edit_message_text(
            "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_category: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤")
    finally:
        if conn:
            conn.close()

def get_products_handlers():
    return [
        CommandHandler("menu", show_main_menu),
        CallbackQueryHandler(handle_category, pattern="^cat_"),
        CallbackQueryHandler(show_main_menu, pattern="^back_to_menu$")
    ]