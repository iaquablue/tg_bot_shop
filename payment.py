from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler, ContextTypes
from database import get_user_balance, update_user_balance
from config import CRYPTOBOT_API_KEY
import requests
import logging

logger = logging.getLogger(__name__)

async def start_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        logger.info(f"Callback data: {query.data}")
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç: prod_<id>_<price>)
        _, product_id, price = query.data.split('_')
        
        context.user_data['current_order'] = {
            'product_id': product_id,
            'price': float(price),
            'quantity': 1
        }
        
        keyboard = [
            [InlineKeyboardButton("üí∞ –° –±–∞–ª–∞–Ω—Å–∞", callback_data="pay_balance")],
            [InlineKeyboardButton("ü™ô CryptoBot", callback_data="pay_crypto")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]
        ]
        
        await query.edit_message_text(
            f"üí≥ –û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞ #{product_id}\n"
            f"–°—É–º–º–∞: {price} —Ä—É–±.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_payment: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞")

async def handle_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        method = query.data
        logger.info(f"–í—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥: {method}")
        
        order = context.user_data.get('current_order')
        if not order:
            await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        if method == "pay_balance":
            user_id = update.effective_user.id
            balance = get_user_balance(user_id)
            
            if balance >= order['price']:
                update_user_balance(user_id, -order['price'])
                await query.edit_message_text(
                    f"‚úÖ –û–ø–ª–∞—á–µ–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞!\n"
                    f"–¢–æ–≤–∞—Ä #{order['product_id']}\n"
                    f"–°–ø–∏—Å–∞–Ω–æ: {order['price']} —Ä—É–±.\n"
                    f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance - order['price']:.2f} —Ä—É–±."
                )
            else:
                await query.edit_message_text(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n"
                    f"–ù—É–∂–Ω–æ: {order['price']} —Ä—É–±.\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±."
                )

        elif method == "pay_crypto":
            response = requests.post(
                "https://pay.crypt.bot/api/createInvoice",
                headers={"Crypto-Pay-API-Token": CRYPTOBOT_API_KEY},
                json={
                    "asset": "USDT",
                    "amount": str(order['price']),
                    "description": f"–¢–æ–≤–∞—Ä #{order['product_id']}"
                }
            )
            data = response.json()
            
            if data.get('ok'):
                await query.edit_message_text(
                    f"üëâ [–û–ø–ª–∞—Ç–∏—Ç—å {order['price']} USDT]({data['result']['pay_url']})\n\n"
                    "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                    parse_mode="Markdown"
                )
            else:
                raise Exception(data.get('error', '–û—à–∏–±–∫–∞ CryptoBot'))

        elif method == "cancel_order":
            await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
            context.user_data.pop('current_order', None)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_payment: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")

def get_payment_handlers():
    return [
        CallbackQueryHandler(start_payment, pattern="^prod_"),
        CallbackQueryHandler(handle_payment, pattern="^pay_|cancel_order")
    ]