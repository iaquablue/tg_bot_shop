from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
import sqlite3
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
INPUT_DATA, CONFIRM = range(2)

async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    conn = sqlite3.connect('data/products.db')
    cursor = conn.cursor()
    cursor.execute("SELECT role FROM users WHERE user_id=?", (user_id,))
    role = cursor.fetchone()
    conn.close()
    return role and role[0] == 'admin'

async def grant_admin(update: Update, context: CallbackContext):
    """–í—ã–¥–∞—á–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ (/grant_admin @username)"""
    if not await is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
        return

    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ username: /grant_admin @username")
        return

    target_username = context.args[0].strip('@')
    conn = sqlite3.connect('data/products.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute(
            "UPDATE users SET role='admin' WHERE username=?",
            (target_username,)
        )
        conn.commit()
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()

async def add_product_start(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not await is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return ConversationHandler.END

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è\n"
        "–ü—Ä–∏–º–µ—Ä: –§—É—Ç–±–æ–ª–∫–∞ | 1990 | –û–¥–µ–∂–¥–∞ | –ú—É–∂—Å–∫–∞—è"
    )
    return INPUT_DATA

async def input_product_data(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    user_input = update.message.text
    logger.info("Received input: %s", user_input)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–∞–∑–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        if user_input.count('|') != 3:
            raise ValueError("–ù—É–∂–Ω–æ —Ä–æ–≤–Ω–æ 3 —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è '|'")
            
        name, price, category, subcategory = map(str.strip, user_input.split('|'))
        
        if not price.isdigit():
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
            
        if not all([name, category, subcategory]):
            raise ValueError("–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data["new_product"] = {
            "name": name,
            "price": int(price),
            "category": category,
            "subcategory": subcategory
        }
        logger.debug("Parsed product data: %s", context.user_data["new_product"])

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_product")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
        ]
        
        await update.message.reply_text(
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"üí∞ –¶–µ–Ω–∞: {price}‚ÇΩ\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"üìå –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CONFIRM
        
    except ValueError as e:
        logger.error("Input error: %s", str(e))
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è\n"
            "–ü—Ä–∏–º–µ—Ä: –ö—Ä–æ—Å—Å–æ–≤–∫–∏ | 5990 | –û–±—É–≤—å | –°–ø–æ—Ä—Ç"
        )
        return ConversationHandler.END

async def save_product(update: Update, context: CallbackContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î"""
    try:
        data = context.user_data["new_product"]
        logger.info("Saving product: %s", data)
        
        conn = sqlite3.connect('data/products.db')
        cursor = conn.cursor()
        
        cursor.execute(
            "INSERT INTO products (name, price, category, subcategory) VALUES (?, ?, ?, ?)",
            (data["name"], data["price"], data["category"], data["subcategory"])
        )
        conn.commit()
        
        await update.callback_query.answer("‚úÖ –¢–æ–≤–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        await update.callback_query.edit_message_text(
            f"–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n{data['name']} - {data['price']}‚ÇΩ"
        )
        logger.info("Product saved successfully")
        
    except Exception as e:
        logger.error("Save error: %s", str(e))
        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    finally:
        conn.close()
        return ConversationHandler.END

async def cancel(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    logger.info("User canceled operation")
    await update.callback_query.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await update.callback_query.edit_message_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    return ConversationHandler.END